* {
  margin: 0;
  padding: 0;
}

html {
  text-align: center;
}

body {
  padding: min(50px, 5%);
}

:root {
  --LightBlue: #add8e6;
  --LightGreen: #90ee90;
  --LightCoral: #f08080;
  --LightGoldenRodYellow: #fafad2;
  --LightPink: #ffb6c1;
  --LightSalmon: #ffa07a;
  --LightSkyBlue: #87cefa;
  --LightSeaGreen: #20b2aa;
  --LightSteelBlue: #b0c4de;
}

@layer grid {
  /* ------------------------------------------
   Grid Layout Styles
   This section defines the styles for a grid layout
   with responsive design and specific item styles.
   Each grid item has a unique background color.
   The grid is designed to adapt to different screen sizes
   while maintaining a consistent layout.
   The grid items are styled with padding, border,
   border-radius, and text alignment.
   The grid uses CSS Grid properties to create a flexible
   and responsive layout that adjusts based on the number
   of items and available space.
   The grid-template-columns and grid-template-rows
   properties ensure that the items are displayed in a
   structured manner, filling the available space
   efficiently.
   The use of repeat() and minmax() functions allows
   for a dynamic grid that can adapt to various screen
   sizes, ensuring that the items are displayed
   appropriately without overflowing or leaving too much
   empty space.
   The grid layout is particularly useful for displaying
   collections of items, such as images, cards, or
   other content, in a visually appealing and organized
   manner.      

// ------------------------------------------ */

  .grid-container {
    display: grid;
    gap: 16px;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    border: 2px solid #bbb;
    justify-content: center;

    .item {
      border: 1px solid gray;
      border-radius: 4px;
    }

    .item:nth-child(1) {
      background-color: LightBlue;
    }

    .item:nth-child(2) {
      background-color: LightGreen;
    }

    .item:nth-child(3) {
      background-color: var(--LightCoral);
    }

    .item:nth-child(4) {
      background-color: var(--LightGoldenRodYellow);
    }

    .item:nth-child(5) {
      background-color: var(--LightPink);
    }

    .item:nth-child(6) {
      background-color: var(--LightSalmon);
    }

    .item:nth-child(7) {
      background-color: var(--LightSkyBlue);
    }
    .item:nth-child(8) {
      background-color: var(--LightSeaGreen);
    }
    .item:nth-child(9) {
      background-color: var(--LightSteelBlue);
    }
  }

  .grid-2 {
    display: grid;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: dodgerblue;
    padding: 10px;
    min-height: 100vh;

    .item {
      border: 1px solid gray;
      border-radius: 4px;
      align-content: center;
    }

    .item:nth-child(1) {
      background-color: var(--LightBlue);
    }

    .item:nth-child(2) {
      background-color: var(--LightGreen);
    }

    .item:nth-child(3) {
      background-color: var(--LightCoral);
    }

    .item:nth-child(4) {
      background-color: var(--LightGoldenRodYellow);
    }

    .item:nth-child(5) {
      background-color: var(--LightPink);
    }

    .item:nth-child(6) {
      background-color: var(--LightSalmon);
    }

    .item:nth-child(7) {
      background-color: var(--LightSkyBlue);
    }
    .item:nth-child(8) {
      background-color: var(--LightSeaGreen);
    }
    .item:nth-child(9) {
      background-color: var(--LightSteelBlue);
    }
  }

  .grid-3 {
    display: grid;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: dodgerblue;
    padding: 10px;
    min-height: 100vh;

    > div {
      background-color: #f1f1f1;
      text-align: center;
      padding: 10px;
      font-size: 30px;
      align-content: center;
    }

    .item1 {
      grid-column-start: 1;
      grid-column-end: 3;
    }

    .item8 {
      grid-column: 3 / 4;
      grid-row: 2 / 5;
    }

    .item7 {
      grid-column: 1 / 3;
    }
  }
}

@layer flex {
  /* ------------------------------------------
   Flexbox Layout Styles
   This section defines the styles for a flexbox layout
   with specific item styles. The flex container is set
   to display as a flexbox with a gap between items.
   Each item has a defined height and width, along with
   padding, border, and border-radius for styling.
   The items are given unique background colors to
   differentiate them visually. The flexbox layout allows
   for flexible arrangement of items, adapting to the
   available space while maintaining the specified gap.
   The justify-content property is used to distribute the
   items evenly within the container.
   This layout is particularly useful for creating
   responsive designs that require items to be aligned
   in a row or column with consistent spacing.

// ------------------------------------------ */

  .flex-container {
    display: flex;
    min-height: 600px;
    background-color: #7e7d7d;

    /* 
      - justify-content to main axis
      - align-content to cross axis
      if gap is set, it will be applied to the around LEFT and RIGHT of the first and last item
    
      */

    justify-content: center;
    /* cross axis */
    align-items: center;
    gap: 40px;

    /* flex-direction: row-reverse; */

    flex-wrap: wrap;

    .item {
      /*
      display: flex;
      justify-content: center;
      align-items: center;

      its to center the content inside the item
      */

      display: flex;
      justify-content: center;
      align-items: center;

      height: 150px;
      width: 150px;

      border: 2px solid red;
      border-radius: 4px;
      font-size: 24pt;
    }

    .item:nth-child(1) {
      background-color: var(--LightBlue);

      /* force grow box */
      flex-grow: 1;
      margin-right: auto;
    }

    .item:nth-child(2) {
      background-color: var(--LightGreen);
    }

    .item:nth-child(3) {
      background-color: var(--LightCoral);
    }

    .item:nth-child(4) {
      background-color: var(--LightGoldenRodYellow);
    }

    .item:nth-child(5) {
      background-color: var(--LightPink);
    }

    .item:nth-child(6) {
      background-color: var(--LightSalmon);

      /* stop shrink box */
      flex-shrink: 0;

      /* force cross axis to end specific */
      align-self: flex-end;
    }
  }
}
